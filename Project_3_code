### project3-GroupL.py
# MIT License
# 
# Copyright (c) 2022 Andrei Ivlev, Animesh Gautam, Arundhati Pillay, Jiayi Yang, Tsaichi Lee
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import pandas as pd
import numpy as np 

class Process:
    def __init__(self):
        
        df = pd.read_csv('statement-2022-06.csv')
        df.columns = ['Description', 'Date', 'Amount']
        previous_balance = df.loc[df['Description']=='Previous balance']['Date']
        outgoing_transactions = df.loc[df['Description']=='Outgoing transactions']['Date']
        incoming_transactions = df.loc[df['Description']=='Incoming transactions']['Date']
        new_balance = df.loc[df['Description']=='Your new balance']['Date']
        row = df[df['Description'] == 'Previous balance'].index.tolist()[0]

        df = df.iloc[:row]
        df = df[df['Description'].notna()]
        df = df.reset_index(drop=True)
        df = df.replace('Booking Date', np.nan)

        first_list = df.index[df['Date'].notna() == True].tolist()
        second_list = [x+1 for x in first_list]
        index_list = first_list + second_list
        index_list = sorted(index_list)
        df = df.iloc[index_list]
        df = df.reset_index(drop=True)
        
        df['Description'] = np.where((df['Date'].isna() == True) & (df['Description'].str.contains(" • ", case=False) == False),
                                     np.nan,
                                     df['Description'])
        df['Description'] = np.where(df['Description'].str.contains(" • ", case=False) == True,
                                     df['Description'].str.split(' • ').str[1],
                                     df['Description'])
        df['Description'] = df['Description'].fillna('Other')

        df['Category'] = np.where(df['Date'].isna() == False,
                                  df['Description'].shift(-1),
                                  np.nan)
        df = df[df['Category'].notna()]
        df = df.reset_index(drop=True)

        df['Amount'] = df['Amount'].str.replace(',', '.')
        df['Amount'] = df['Amount'].str.replace('€', '')
        df['Amount'] = pd.to_numeric(df['Amount'],errors = 'coerce')
        df['Category'] = np.where(df['Amount'] > 0, 
                                     'Income', 
                                     df['Category'])

        self.l_income = list(df[df['Category'] == 'Income']['Amount'])

        df_cat = df[['Category', 'Amount']]
        df_cat = df_cat[df_cat['Category'] != 'Income']
        df_cat['Amount'] = abs(df_cat['Amount'])
        self.expense = df_cat.groupby('Category')['Amount'].apply(list).to_dict()
        
class Budget(Process):
   def __init__(self):
       super().__init__()
       #get the total income and expense by suming they up and round them to 2 digits
       self.total_income = sum(self.l_income)
       self.total_income = round(self.total_income,2)
       self.total_expense = 0
       for x in self.expense.values():
          for y in x:
           self.total_expense += y
       self.total_expense = round(self.total_expense,2)
    
    #create display function to show income
    def display_income(self):
        print("\nTotal income: {}".format(self.total_income))
        
    def display_expense(self):
        print("\nTotal expenses: {}".format(self.total_expense))
        
    def user_balance(self):
        print("\nUser balance: {}".format(self.balance))
        
    def expense_distribution(self):
        for category,l in self.expense.items():
            cat_sum = 0 
            for i in l:
                cat_sum += i      
            print("\n{} : {} %".format(category, round((cat_sum / self.total_expense)*100,2)))
            
    def cat_expense(self):
        self.cat = {}
        for category,l in self.expense.items():
            cat_sum = 0 
            for i in l:
                cat_sum += i
            self.cat[category] = cat_sum
        cat_required = input('Please enter the category expense you want to query ')
        if cat_required in self.cat.keys():
            print(round(self.cat[cat_required],2))
        else:
            print('Sorry, there is no such category')
            
     def savings_basic(self):
        self.basic_goal = int(input('\nEnter amount you want to save over the next year: '))
        self.basic_monthly_amount = self.basic_goal / 12
        self.basic_percent = (self.basic_monthly_amount * 100) / self.total_income
        print("You should save {} {} of your income per month".format(round(self.basic_percent,2),'%'))
        print("i.e. {} / month".format(round(self.basic_monthly_amount,2)))
    
        if(self.basic_monthly_amount > self.balance):
            print("Based on your balance, you need to reduce expenses or increase income to reach your savings goals")
            if self.balance > 0:
                print('But you finished {} of your goal'.format(round(self.balance/self.basic_monthly_amount,2)))
            else:
                print('Try to make both ends meet next month!')
        else:
            print("Based on your balance, you are on track to reach your savings goals")
            
     def savings_advanced(self):
        self.adv_percent = int(input('\nEnter % ' + 'of income you want to save: '))
        self.adv_monthly_amount = (self.adv_percent * self.total_income) / 100
        print("You must save {} / month".format(self.adv_monthly_amount))
        #compare to see if the balance can meet the saving goal per month
        if(self.adv_monthly_amount > self.balance):
            print("Based on your balance, you need to reduce expenses or increase income to reach your savings goals")
        else:
            print("Based on your balance, you are on track to reach your savings goals")

